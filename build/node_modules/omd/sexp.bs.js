// Generated by Melange

import * as Caml_string from "melange.js/caml_string.bs.js";
import * as Curry from "melange.js/curry.bs.js";
import * as Stdlib__Format from "melange/format.bs.js";
import * as Stdlib__List from "melange/list.bs.js";

function atom(s) {
  return {
          TAG: /* Atom */0,
          _0: s
        };
}

function link(param) {
  const title = param.title;
  const title$1 = title !== undefined ? ({
        hd: {
          TAG: /* Atom */0,
          _0: title
        },
        tl: /* [] */0
      }) : /* [] */0;
  return {
          TAG: /* List */1,
          _0: {
            hd: {
              TAG: /* Atom */0,
              _0: "link"
            },
            tl: {
              hd: inline(param.label),
              tl: {
                hd: {
                  TAG: /* Atom */0,
                  _0: param.destination
                },
                tl: title$1
              }
            }
          }
        };
}

function inline(param) {
  switch (param.TAG | 0) {
    case /* Concat */0 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "concat"
                  },
                  tl: Stdlib__List.map(inline, param._1)
                }
              };
    case /* Text */1 :
        return {
                TAG: /* Atom */0,
                _0: param._1
              };
    case /* Emph */2 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "emph"
                  },
                  tl: {
                    hd: inline(param._1),
                    tl: /* [] */0
                  }
                }
              };
    case /* Strong */3 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "strong"
                  },
                  tl: {
                    hd: inline(param._1),
                    tl: /* [] */0
                  }
                }
              };
    case /* Code */4 :
        return {
                TAG: /* Atom */0,
                _0: "code"
              };
    case /* Hard_break */5 :
        return {
                TAG: /* Atom */0,
                _0: "hard-break"
              };
    case /* Soft_break */6 :
        return {
                TAG: /* Atom */0,
                _0: "soft-break"
              };
    case /* Link */7 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "url"
                  },
                  tl: {
                    hd: link(param._1),
                    tl: /* [] */0
                  }
                }
              };
    case /* Image */8 :
        return {
                TAG: /* Atom */0,
                _0: "img"
              };
    case /* Html */9 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "html"
                  },
                  tl: {
                    hd: {
                      TAG: /* Atom */0,
                      _0: param._1
                    },
                    tl: /* [] */0
                  }
                }
              };
    
  }
}

function table_header(param) {
  let tmp;
  switch (param[1]) {
    case /* Default */0 :
        tmp = {
          TAG: /* Atom */0,
          _0: "default"
        };
        break;
    case /* Left */1 :
        tmp = {
          TAG: /* Atom */0,
          _0: "left"
        };
        break;
    case /* Centre */2 :
        tmp = {
          TAG: /* Atom */0,
          _0: "centre"
        };
        break;
    case /* Right */3 :
        tmp = {
          TAG: /* Atom */0,
          _0: "right"
        };
        break;
    
  }
  return {
          TAG: /* List */1,
          _0: {
            hd: inline(param[0]),
            tl: {
              hd: tmp,
              tl: /* [] */0
            }
          }
        };
}

function block(param) {
  switch (param.TAG | 0) {
    case /* Paragraph */0 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "paragraph"
                  },
                  tl: {
                    hd: inline(param._1),
                    tl: /* [] */0
                  }
                }
              };
    case /* List */1 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "list"
                  },
                  tl: Stdlib__List.map((function (xs) {
                          return {
                                  TAG: /* List */1,
                                  _0: {
                                    hd: {
                                      TAG: /* Atom */0,
                                      _0: "list-item"
                                    },
                                    tl: Stdlib__List.map(block, xs)
                                  }
                                };
                        }), param._3)
                }
              };
    case /* Blockquote */2 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "blockquote"
                  },
                  tl: Stdlib__List.map(block, param._1)
                }
              };
    case /* Thematic_break */3 :
        return {
                TAG: /* Atom */0,
                _0: "thematic-break"
              };
    case /* Heading */4 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "heading"
                  },
                  tl: {
                    hd: {
                      TAG: /* Atom */0,
                      _0: String(param._1)
                    },
                    tl: {
                      hd: inline(param._2),
                      tl: /* [] */0
                    }
                  }
                }
              };
    case /* Code_block */5 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "code-block"
                  },
                  tl: {
                    hd: {
                      TAG: /* Atom */0,
                      _0: param._1
                    },
                    tl: /* [] */0
                  }
                }
              };
    case /* Html_block */6 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "html"
                  },
                  tl: {
                    hd: {
                      TAG: /* Atom */0,
                      _0: param._1
                    },
                    tl: /* [] */0
                  }
                }
              };
    case /* Definition_list */7 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "def-list"
                  },
                  tl: {
                    hd: {
                      TAG: /* List */1,
                      _0: Stdlib__List.map((function (elt) {
                              return {
                                      TAG: /* List */1,
                                      _0: {
                                        hd: inline(elt.term),
                                        tl: {
                                          hd: {
                                            TAG: /* List */1,
                                            _0: Stdlib__List.map(inline, elt.defs)
                                          },
                                          tl: /* [] */0
                                        }
                                      }
                                    };
                            }), param._1)
                    },
                    tl: /* [] */0
                  }
                }
              };
    case /* Table */8 :
        return {
                TAG: /* List */1,
                _0: {
                  hd: {
                    TAG: /* Atom */0,
                    _0: "table"
                  },
                  tl: {
                    hd: {
                      TAG: /* List */1,
                      _0: Stdlib__List.map(table_header, param._1)
                    },
                    tl: {
                      hd: {
                        TAG: /* List */1,
                        _0: Stdlib__List.map((function (row) {
                                return {
                                        TAG: /* List */1,
                                        _0: Stdlib__List.map(inline, row)
                                      };
                              }), param._2)
                      },
                      tl: /* [] */0
                    }
                  }
                }
              };
    
  }
}

function create(ast) {
  return {
          TAG: /* List */1,
          _0: Stdlib__List.map(block, ast)
        };
}

function needs_quotes(s) {
  let _i = 0;
  while(true) {
    const i = _i;
    if (i >= s.length) {
      return false;
    }
    const match = Caml_string.get(s, i);
    if (match >= 127) {
      if (match < 160) {
        return true;
      }
      _i = i + 1 | 0;
      continue ;
    }
    if (match < 33) {
      return true;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function print(ppf, param) {
  if (param.TAG === /* Atom */0) {
    const s = param._0;
    if (needs_quotes(s)) {
      return Curry._1(Stdlib__Format.fprintf(ppf)(/* Format */{
                      _0: {
                        TAG: /* Caml_string */3,
                        _0: /* No_padding */0,
                        _1: /* End_of_format */0
                      },
                      _1: "%S"
                    }), s);
    } else {
      return Stdlib__Format.pp_print_string(ppf, s);
    }
  }
  const partial_arg = Stdlib__Format.pp_print_space;
  Curry._2(Stdlib__Format.fprintf(ppf)(/* Format */{
            _0: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<1>",
                    _1: /* End_of_format */0
                  },
                  _1: "<1>"
                }
              },
              _1: {
                TAG: /* Char_literal */12,
                _0: /* '(' */40,
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* ')' */41,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Close_box */0,
                      _1: /* End_of_format */0
                    }
                  }
                }
              }
            },
            _1: "@[<1>(%a)@]"
          }), (function (param, param$1) {
          return Stdlib__Format.pp_print_list(partial_arg, print, param, param$1);
        }), param._0);
}

export {
  atom ,
  link ,
  inline ,
  table_header ,
  block ,
  create ,
  needs_quotes ,
  print ,
}
/* Stdlib__Format Not a pure module */
