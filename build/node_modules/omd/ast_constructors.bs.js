// Generated by Melange

import * as Stdlib__List from "melange/list.bs.js";

function concat(elems) {
  return {
          TAG: /* Concat */0,
          _0: /* [] */0,
          _1: elems
        };
}

const empty = {
  TAG: /* Concat */0,
  _0: /* [] */0,
  _1: /* [] */0
};

function txt(attrsOpt, s) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  return {
          TAG: /* Text */1,
          _0: attrs,
          _1: s
        };
}

function em(attrsOpt, s) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  return {
          TAG: /* Emph */2,
          _0: attrs,
          _1: txt(undefined, s)
        };
}

function strong(attrsOpt, s) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  return {
          TAG: /* Strong */3,
          _0: attrs,
          _1: txt(undefined, s)
        };
}

function code(attrsOpt, s) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  return {
          TAG: /* Code */4,
          _0: attrs,
          _1: s
        };
}

function a(attrsOpt, title, url, label) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  return {
          TAG: /* Link */7,
          _0: attrs,
          _1: {
            label: txt(undefined, label),
            destination: url,
            title: title
          }
        };
}

function img(attrsOpt, title, alt, src) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  return {
          TAG: /* Image */8,
          _0: attrs,
          _1: {
            label: txt(undefined, alt),
            destination: src,
            title: title
          }
        };
}

function html(s) {
  return {
          TAG: /* Html */9,
          _0: /* [] */0,
          _1: s
        };
}

function p(attrsOpt, inlines) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  return {
          TAG: /* Paragraph */0,
          _0: attrs,
          _1: {
            TAG: /* Concat */0,
            _0: /* [] */0,
            _1: inlines
          }
        };
}

function ul(attrsOpt, spacingOpt, items) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  const spacing = spacingOpt !== undefined ? spacingOpt : /* Loose */0;
  return {
          TAG: /* List */1,
          _0: attrs,
          _1: {
            TAG: /* Bullet */1,
            _0: /* '-' */45
          },
          _2: spacing,
          _3: items
        };
}

function ol(attrsOpt, startOpt, charOpt, spacingOpt, items) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  const start = startOpt !== undefined ? startOpt : 1;
  const $$char = charOpt !== undefined ? charOpt : "Dot";
  const spacing = spacingOpt !== undefined ? spacingOpt : /* Loose */0;
  const c = $$char === "Dot" ? /* '.' */46 : /* ')' */41;
  return {
          TAG: /* List */1,
          _0: attrs,
          _1: {
            TAG: /* Ordered */0,
            _0: start,
            _1: c
          },
          _2: spacing,
          _3: items
        };
}

function blockquote(attrsOpt, blocks) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  return {
          TAG: /* Blockquote */2,
          _0: attrs,
          _1: blocks
        };
}

function h(attrsOpt, level, inlines) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  return {
          TAG: /* Heading */4,
          _0: attrs,
          _1: level,
          _2: {
            TAG: /* Concat */0,
            _0: /* [] */0,
            _1: inlines
          }
        };
}

function code_bl(attrsOpt, langOpt, s) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  const lang = langOpt !== undefined ? langOpt : "";
  return {
          TAG: /* Code_block */5,
          _0: attrs,
          _1: lang,
          _2: s
        };
}

function html_bl(attrsOpt, s) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  return {
          TAG: /* Html_block */6,
          _0: attrs,
          _1: s
        };
}

function dl(attrsOpt, items) {
  const attrs = attrsOpt !== undefined ? attrsOpt : /* [] */0;
  const def_elt_of_pair = function (param) {
    const term_1 = param.term;
    const term = {
      TAG: /* Concat */0,
      _0: /* [] */0,
      _1: term_1
    };
    const defs = Stdlib__List.map(concat, param.defs);
    return {
            term: term,
            defs: defs
          };
  };
  const def_elts = Stdlib__List.map(def_elt_of_pair, items);
  return {
          TAG: /* Definition_list */7,
          _0: attrs,
          _1: def_elts
        };
}

const Impl_br = {
  TAG: /* Hard_break */5,
  _0: /* [] */0
};

const Impl_nl = {
  TAG: /* Soft_break */6,
  _0: /* [] */0
};

const Impl_hr = {
  TAG: /* Thematic_break */3,
  _0: /* [] */0
};

const Impl = {
  empty: empty,
  txt: txt,
  em: em,
  strong: strong,
  code: code,
  br: Impl_br,
  nl: Impl_nl,
  a: a,
  img: img,
  html: html,
  p: p,
  ul: ul,
  ol: ol,
  blockquote: blockquote,
  hr: Impl_hr,
  h: h,
  code_bl: code_bl,
  html_bl: html_bl,
  dl: dl
};

export {
  Impl ,
}
/* No side effect */
