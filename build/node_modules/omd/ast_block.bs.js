// Generated by Melange

import * as Curry from "melange.js/curry.bs.js";
import * as Stdlib__List from "melange/list.bs.js";

const StringContent = {};

const InlineContent = {};

const List_types = {};

const Table_alignments = {};

function Make(C) {
  return {};
}

function MakeMapper(Src, Dst) {
  const SrcBlock = {};
  const DstBlock = {};
  const map = function (f, param) {
    switch (param.TAG | 0) {
      case /* Paragraph */0 :
          return {
                  TAG: /* Paragraph */0,
                  _0: param._0,
                  _1: Curry._1(f, param._1)
                };
      case /* List */1 :
          return {
                  TAG: /* List */1,
                  _0: param._0,
                  _1: param._1,
                  _2: param._2,
                  _3: Stdlib__List.map((function (param) {
                          return Stdlib__List.map((function (param) {
                                        return map(f, param);
                                      }), param);
                        }), param._3)
                };
      case /* Blockquote */2 :
          return {
                  TAG: /* Blockquote */2,
                  _0: param._0,
                  _1: Stdlib__List.map((function (param) {
                          return map(f, param);
                        }), param._1)
                };
      case /* Thematic_break */3 :
          return {
                  TAG: /* Thematic_break */3,
                  _0: param._0
                };
      case /* Heading */4 :
          return {
                  TAG: /* Heading */4,
                  _0: param._0,
                  _1: param._1,
                  _2: Curry._1(f, param._2)
                };
      case /* Code_block */5 :
          return {
                  TAG: /* Code_block */5,
                  _0: param._0,
                  _1: param._1,
                  _2: param._2
                };
      case /* Html_block */6 :
          return {
                  TAG: /* Html_block */6,
                  _0: param._0,
                  _1: param._1
                };
      case /* Definition_list */7 :
          const f$1 = function (param) {
            return {
                    term: Curry._1(f, param.term),
                    defs: Stdlib__List.map(f, param.defs)
                  };
          };
          return {
                  TAG: /* Definition_list */7,
                  _0: param._0,
                  _1: Stdlib__List.map(f$1, param._1)
                };
      case /* Table */8 :
          return {
                  TAG: /* Table */8,
                  _0: param._0,
                  _1: Stdlib__List.map((function (param) {
                          return [
                                  Curry._1(f, param[0]),
                                  param[1]
                                ];
                        }), param._1),
                  _2: Stdlib__List.map((function (param) {
                          return Stdlib__List.map(f, param);
                        }), param._2)
                };
      
    }
  };
  return {
          SrcBlock: SrcBlock,
          DstBlock: DstBlock,
          map: map
        };
}

const SrcBlock = {};

const DstBlock = {};

function map(f, param) {
  switch (param.TAG | 0) {
    case /* Paragraph */0 :
        return {
                TAG: /* Paragraph */0,
                _0: param._0,
                _1: Curry._1(f, param._1)
              };
    case /* List */1 :
        return {
                TAG: /* List */1,
                _0: param._0,
                _1: param._1,
                _2: param._2,
                _3: Stdlib__List.map((function (param) {
                        return Stdlib__List.map((function (param) {
                                      return map(f, param);
                                    }), param);
                      }), param._3)
              };
    case /* Blockquote */2 :
        return {
                TAG: /* Blockquote */2,
                _0: param._0,
                _1: Stdlib__List.map((function (param) {
                        return map(f, param);
                      }), param._1)
              };
    case /* Thematic_break */3 :
        return {
                TAG: /* Thematic_break */3,
                _0: param._0
              };
    case /* Heading */4 :
        return {
                TAG: /* Heading */4,
                _0: param._0,
                _1: param._1,
                _2: Curry._1(f, param._2)
              };
    case /* Code_block */5 :
        return {
                TAG: /* Code_block */5,
                _0: param._0,
                _1: param._1,
                _2: param._2
              };
    case /* Html_block */6 :
        return {
                TAG: /* Html_block */6,
                _0: param._0,
                _1: param._1
              };
    case /* Definition_list */7 :
        const f$1 = function (param) {
          return {
                  term: Curry._1(f, param.term),
                  defs: Stdlib__List.map(f, param.defs)
                };
        };
        return {
                TAG: /* Definition_list */7,
                _0: param._0,
                _1: Stdlib__List.map(f$1, param._1)
              };
    case /* Table */8 :
        return {
                TAG: /* Table */8,
                _0: param._0,
                _1: Stdlib__List.map((function (param) {
                        return [
                                Curry._1(f, param[0]),
                                param[1]
                              ];
                      }), param._1),
                _2: Stdlib__List.map((function (param) {
                        return Stdlib__List.map(f, param);
                      }), param._2)
              };
    
  }
}

const Mapper = {
  SrcBlock: SrcBlock,
  DstBlock: DstBlock,
  map: map
};

const Raw = {};

const WithInline = {};

export {
  StringContent ,
  InlineContent ,
  List_types ,
  Table_alignments ,
  Make ,
  MakeMapper ,
  Mapper ,
  Raw ,
  WithInline ,
}
/* No side effect */
